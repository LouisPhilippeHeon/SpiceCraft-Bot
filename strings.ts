import { inscriptionStatus, mojangApiUrl } from './bot-constants';
import { minecraftServerName, playerRoleName, whitelistChannelName } from './config';


export namespace ButtonEvents {
	export const clickToConfirmChangesToWhitelist = 'Clique sur le bouton lorsque c\'est fait, afin que <@${discordUuid}> soit inform√© du changement li√© √† sa demande.';

	export enum approbation {
		changeWhitelistBeforeCliking = 'N\'oublies pas d\'ajouter manuellement le joueur √† la whitelist AVANT de cliquer sur le bouton !',
		messageSentToPlayerToConfirmInscription = 'Tu a √©t√© ajout√© √† la whitelist. Si tu n\'arrive pas √† te connecter, ton username Minecraft est peut-√™tre incorrect. Si c\'est le cas, clique √† nouveau sur le bouton d\'inscription.',
		requestGranted = '‚úÖ La demande a √©t√© approuv√©e par <@${discordUuid}>.',
		success = 'Un message a √©t√© envoy√© √† <@${discordUuid}> pour l\'informer de son ajout √† la whitelist.',
		successNoDm = '<@${discordUuid}> a √©t√© ajout√© √† la whitelist. Cependant, ses param√®tres de confidentialit√© m\'emp√™chent de lui envoyer un message afin de lui en informer.'
	}

	export enum ban {
		messageUpdate = 'üî® Le joueur a √©t√© retir√© de la whitelist du serveur Minecraft par <@${discordUuid}>.',
		reply = '<@${discordUuid}> a √©t√© retir√© du serveur Minecraft avec succ√®s.'
	}

	export enum enrolling {
		adminsAlreadyDeniedRequest = 'üö´ Les administrateurs ont d√©j√† refus√© ta demande ! üö´',
		askIfFirstTimePlaying = `As-tu d√©j√† jou√© sur ${minecraftServerName} ?`,
		askWhatIsMinecraftUsername = 'Quel est ton nom d\'utilisateur sur Minecraft ?',
		askWhatIsNewMinecraftUsername = 'Quel est le bon nom d\'utilisateur ?',
		askWhoInvitedNewPlayer = `Qui t\'a invit√© sur ${minecraftServerName} ? Inscrit son nom d\'utilisateur Discord.`,
		awaitingApprovalUserChangedMinecraftUsername = '<@${discordUuid}> a chang√© son username Minecraft pour \`${minecraftUsername}\` dans sa demande d\'ajout √† la whitelist.',
		dmsAreClosed = 'Tes param√®tres de confidentialit√© m\'emp√™chent de t\'envoyer des messages. Change ces param√®tres pour continuer.',
		embedDescription = 'Compte Discord : <@${discordUuid}>.\nUsername Minecraft : \`${minecraftUsername}\`.',
		messageSentInDms = 'Merci de r√©pondre au bot qui t\'a a envoy√© un message en priv√© !',
		messageSentInDmsNewUser = 'Bienvenue, nous sommes heureux de t\'accueillir ! Merci de r√©pondre au bot qui t\'a envoy√© un message en priv√© !',
		minecraftAccountDoesNotExist = '‚ùå Le compte Minecraft ¬´ ${minecraftUsername} ¬ª n\'existe pas! Tu peux cliquer √† nouveau le bouton \\`S\'inscrire\\` pour r√©essayer. ‚ùå',
		reactToAcceptRules = 'R√©agit avec ‚úÖ pour indiquer que tu a lu et accept√© les r√®gles.',
		requestSucessfullyUpdated = 'Ta demande √† √©t√© mise √† jour avec succ√®s !',
		sameMinecraftAccountAsBefore = 'Pas besoin de mettre √† jour ton nom d\'utilisateur, car il est identique √† celui associ√© au compte Minecraft dans la whitelist.',
		usernameUpdated = 'Ton nom d\'utilisateur a √©t√© chang√© avec succ√®s, je t\'envoie un message lorsque le nom d\'utilisateur sera mis √† jour dans la whitelist.',
		waitForAdminApprobation = 'Ton inscription est en attente d\'approbation par les administrateurs, je t\'enverrais un message quand elle sera accept√©e!'
	}

	export enum rejection {
		messageSentToUserToInformRejection = 'D√©sol√©, mais les administrateurs ont choisi de ne pas t\'ajouter √† la whitelist. Contacte-les pour plus de d√©tails.',
		requestDenied = '‚ùå La demande a √©t√© rejet√©e par <@${discordUuid}>.',
		askConfirmation = 'Es-tu certain de vouloir rejeter <@${discordUuid}> ?',
		success = 'Un message a √©t√© envoy√© √† <@${discordUuid}> pour l\'informer du rejet.',
		successNoDm = '<@${discordUuid}> a √©t√© rejet√©. Cependant, ses param√®tres de confidentialit√© m\'emp√™chent de lui envoyer un message afin de lui en informer.',
		userStillInBdExplanation = 'Cet utilisateur est encore dans la base de donn√©es, avec le statut ¬´ rejet√© ¬ª, donc s\'il rejoint √† nouveau le serveur, le bot se souvient que <@${discordUuid}> est rejet√©. Si tu souhaite le supprimer, tu peux utiliser la commande /supprimer-entree'
	}

	export enum usernameChangeConfirmation {
		changeWhitelistBeforeCliking = 'N\'oublies pas de modifier manuellement la whitelist AVANT de cliquer sur le bouton !',
		messageUpdate = '‚úÖ La mise √† jour de username a √©t√© compl√©t√©e (avec l\'autorisation de <@${discordUuid}>).',
		messageSentToConfirmUsernameChange = 'Ton username Minecraft a √©t√© mis √† jour dans la whitelist.',
		success = 'Un message a √©t√© envoy√© √† <@${discordUuid}> pour l\'informer de la mise √† jour du username.',
		successNoDm = 'Mise a jour du compte Minecraft de <@${discordUuid}> effectu√©e avec succ√®s, dans la whitelist et la base de donn√©es. Cependant, ses param√®tres de confidentialit√© m\'emp√™chent de lui envoyer un message afin de lui en informer.'
	}
}

export namespace Commands {
	export enum addMember {
		alreadyInDatabase = 'Cet utilisateur existe d√©j√† dans la base de donn√©es. Si tu veux modifier le compte Minecraft qui lui est associ√©, utilise la commande `/modifier-username`.',
		dmApproved = 'Un administrateur t\'a manuellement ajout√© √† la whitelist du serveur Minecraft.',
		dmRejected = 'Un administrateur t\'a manuellement rejet√© de la whitelist du serveur Minecraft.',
		membreOptionDescription = 'Membre √† inscrire.',
		silentOptionDescription = 'Envoyer un message √† l\'utilisateur ?',
		success = 'Le profil de <@${discordUuid}> est ajout√© dans la base de donn√©es !',
		successNoDm = 'Le profil de <@${discordUuid}> est ajout√© dans la base de donn√©es ! Toutefois, il a √©t√© impossible de lui envoyer un message en raison de ses param√®tres de confidentialit√©.',
		statusOptionDescription = 'Status √† attribuer au membre. Si aucun n\'est sp√©cifi√©, il sera approuv√©.',
		usernameMinecraftOptionDescription = 'Nom de l\'utilisateur sur Minecraft du joueur.'
	}

	export enum approve {
		description = 'Approuver le membre du serveur Minecraft et lui ajouter le r√¥le joueur sur le Discord.',
		memberOptionDescription = 'Membre √† approuver',
		silentOptionDescription = 'Envoyer un message √† l\'utilisateur approuv√© ?'
	}

	export enum deleteEntry {
		description = 'Supprime une rang√©e dans la base de donn√©es.',
		messageUpdate = 'üóëÔ∏è L\'utilisateur a √©t√© supprim√© de la whitelist et de la base de donn√©es.',
		removeFromWhitelistOption = 'Retirer le joueur de la whitelist (par d√©faut: Oui) ?',
		reply = '<@${discordUuid}> √† √©t√© supprim√© de la whitelist et de la base de donn√©es avec succ√®s.',
		userIdOption = 'Retirer l\'entr√©e pour quel UUID Discord ?'
	}

	export enum findDiscordMember {
		description = 'Afficher un membre du serveur Discord associ√© √† un username Minecraft.',
		usernameOptionDescription = 'Username Minecraft'
	}

	export enum findMinecraftMember {
		description = 'Affiche le nom d\'utilisateur Minecraft d\'un membre du serveur Discord.',
		userOptionDescription = 'Membre dont il faut afficher le nom d\'utilisateur Minecraft.'
	}

	export enum displayUsers {
		databaseEntryLine = '<@${discordUuid}> | [Afficher](<' + mojangApiUrl + '/user/profile/${minecraftUuid}>) | ${statusEmoji}\n',
		description = 'Affiche les utilisateurs inscrit selon leur statut (optionnel).',
		displayingAllUsers = 'Affichage de tous les utilisateurs',
		displayingUsersWithStatus = 'Affichage des utilisateurs avec le statut ¬´ ${status} ¬ª',
		filenameHtml = 'utilisateurs.html',
		filenameJson = 'utilisateurs.json',
		filenameJsonWithStatus = 'utilisateurs_${status}.json',
		filenameHtmlWithStatus = 'utilisateurs_${status}.html',
		formatOptionDescription = 'Afficher les donn√©es avec quel format?',
		noUserFound = 'Aucun utilisateur √† afficher.',
		statusOptionDescription = 'Rechercher les utilisateur avec un statut particulier.'
	}

	export enum editUsername {
		confirmationMessage = 'Nom d\'utilisateur chang√©.',
		description = 'Manuellement modifier le nom d\'utilisateur Minecraft d\'un joueur.',
		newUsernameOptionDescription = 'Quel est le nouveau nom d\'utilisateur ?',
		userOptionDescription = 'Modifier l\'entr√©e pour quel UUID Discord ?',
		usernameIdenticalToPreviousOne = 'Pas besoin de changer le nom d\'utilisateur, le nouveau est identique √† celui d√©j√† dans la base de donn√©es.'
	}

	export enum endSeason {
		description = `Efface la base de donn√©es, efface les messages de #${whitelistChannelName} et supprime le r√¥le ${playerRoleName}.`,
		newSeasonBegins = 'Nouvelle saison !',
		saveFilename = 'sauvegarde_saison.json',
		seasonEnded = 'La saison a pris fin !',
		warning = `Attention ! Es-tu certain de vouloir terminer la saison en cours? La base de donn√©e sera effac√©e, les r√¥les seront remis √† z√©ro et tous les messages sur le channel #${whitelistChannelName} seront effac√©s.`
	}

	export enum reject {
		description = 'Rejeter le membre du serveur Minecraft et lui retirer le r√¥le joueur sur le Discord.',
		silentOptionDescription = 'Envoyer un message √† l\'utilisateur rejet√© ?',
		userOptionDescription = 'Membre √† rejeter'
	}

	export enum resetStatus {
		description = 'Remettre le statut d\'un membre √† ¬´ en attente ¬ª.',
		userOptionDescription = 'Membre dont il faut r√©initialiser le statut'
	}

	export enum showInscriptionButton {
		description = 'Envoie un message avec un bouton permettant de s\'inscrire.',
		done = 'Fait !',
		instructions = 'Pour t\'inscrire, clique sur le bouton. Le bot va t\'envoyer un message priv√© pour compl√©ter l\'inscription.\n**Si tu as entr√© un nom d\'utilisateur erron√© lors de la configuration initiale, clique sur le bouton √† nouveau.**'
	}
}

export namespace Components {
	export enum buttons {
		approve = 'Approuver',
		cancel = 'Annuler',
		endSeason = 'Oui, terminer la saison',
		doNotUpdate = 'Ne pas mettre √† jour',
		ignore = 'Ignorer',
		manuallyAddedToWhitelist = 'Ajout manuel effectu√©',
		manuallyEditedWhitelist = 'Modifications manuelles effectu√©es',
		no = 'Non',
		register = 'S\'inscrire',
		reject = 'Rejeter',
		yes = 'Oui'
	}

	export enum descriptions {
		approvalRequest = 'Compte Discord : <@${discordUuid}>.\nUsername Minecraft : \`${username}\`.',
		approvalRequestNewUser = 'Compte Discord : <@${discordUuid}>.\nUsername Minecraft : \`${username}\`.\nPersonne qui a invit√© : ${inviter}.',
		usernameChangeRequest = 'Compte Discord : <@${discordUuid}>.\nNouveau username Minecraft : \`${username}\`.',
		userLeft = 'Compte Discord : <@${discordUuid}>.',
		userBanned = 'Compte Discord : <@${discordUuid}>.',
		rules = '1. Jouer sur le serveur signifie que vous avez pris connaissance des r√®gles.\n2. Il est possible de construire une base dans l\'overworld √† l\'ext√©rieur d\'un carr√© de 600 blocs de largeur autour de 0,0 (donc, si une des coordonn√©es exc√®de +300 ou -300, vous pouvez construire votre base). Ce carr√© est donc r√©serv√© pour les boutiques!\n3. Assurez vous que vos constructions sur le toit du nether soient spawn-proof.\n4. Aucun grief ou vol n\'est tol√©r√©. Cela inclut boutiques, maisons et farms.\n5. Aucun hack, cheat, xray, minimap ou tout autre avantage injuste n\'est tol√©r√©, ceci inclut les ressource packs, clients, mods et autres. Les seules modifications du client autoris√©es sont Optifine, Iris, Sodium, Phosphore et Litematica.\n6. Le PVP est tol√©r√© uniquement si tous les participants y consentent.\n7. Les pranks sont accept√©s, √† condition d\'√™tre inoffensifs et de bon go√ªt.\n8. Respectez le territoire des autres joueurs. Ne construisez pas proche du territoire d\'un autre sans son accord.\n9. Il est interdit d\'√™tre toxique, m√©chant ou rude avec un autre joueur, sur Discord ou dans le serveur Minecraft directement.\n10. La seed est priv√©e, par cons√©quent il est interdit d\'essayer de la d√©couvrir. Si un joueur est en possession de la seed du serveur, il lui est interdit de l\'utiliser pour obtenir un avantage, cela inclut trouver les slime chunks, certains biomes, des portails de l\'end, etc...\n11. Si vous voyez un ou des joueurs enfreindre ces r√®glements, veuillez aviser un admin le plus rapiement possible sur Discord.\n12. Si un joueur enfreint un de ces r√®glements, les cons√©quences sont √† la discr√©tion des administrateurs.\n13. Les cons√©quences peuvent aller jusqu\'√† un bannissement permanent, tout comme elles peuvent √™tre plus l√©g√®res.'
	}

	export enum titles {
		approvalRequest = '${discordUsername} veut √™tre ajout√© √† la whitelist.',
		usernameChangeRequest = '${discordUsername} demande un changement de nom d\'utilisateur.',
		userLeft = 'Un utilisateur a quitt√©. Faut-il le retirer de la whitelist du serveur et de la base de donn√©es ?',
		userBanned = 'Un utilisateur a √©t√© banni. Faut-il le bannir du serveur Minecraft en plus du sereur Discord ?',
		rules = 'Les r√®gles',
	}
}

export namespace Errors {
	export const missingDataOrExecute = 'Le ${itemType} ${filePath} n\'a pas les propri√©t√©s ¬´ data ¬ª ou ¬´ execute ¬ª.';
	export const usernameUsedWithAnotherAccount = '‚ö†Ô∏è Un autre joueur est d√©j√† inscrit avec ce nom d\'utilisateur Minecraft. S\'il s\'agit bien de ton nom d\'utilisateur, contacte un administrateur. ‚ö†Ô∏è';
	export const userResponseTimeout = 'Temps de r√©ponse maximum d√©pass√©, r√©essaye en cliqant le bouton `S\'inscrire` √† nouveau.';

	export enum interaction {
		buttonExecution = 'Une erreur inconnue s\'est produite !',
		buttonNotFound = 'Aucun bouton ne corresponsant √† ${button} n\'a √©t√© trouv√©e.',
		commandExecution = 'Une erreur s\'est produite lors de l\'ex√©cution de cette commande !',
		commandNotFound = 'Aucune commande ne corresponsant √† ${command} n\'a √©t√© trouv√©e.',
		unauthorized = 'Tu n\'as pas les permissions requises pour effectuer ceci.'
	}

	export enum discord {
		cantReadLogs = 'Le bot n\'a pas la permission de lire les logs.',
		noDiscordUserWithThisUuid = 'Cet utilisateur Discord n\'est pas membre du serveur.',
		notRepliable = 'Impossible de r√©pondre √† cette interaction.'
	}

	export enum api {
		couldNotConnectToApi = 'Erreur lors de la connexion √† l\'API de Mojang.',
		noMojangAccountWithThatUsername = 'Aucun compte Mojang n\'a ce nom d\'utilisateur !',
		noMojangAccountWithThatUuid = 'Aucun compte Mojang n\'a ce UUID !'
	}

	export enum database {
		invalidStatus = 'Statut invalide',
		notUnique = 'Ce UUID Minecraft ou Discord existe d√©j√† dans la base de donn√©es.',
		notUniqueMinecraft = 'Un autre joueur s\'est inscrit avec ce compte Minecraft.',
		unknownError = 'Une erreur inconnue est survenue lors de l\'√©criture dans la base de donn√©es.',
		userDoesNotExist = 'Cet utilisateur n\'est pas inscrit !'
	}

	export enum rcon {
		connexionError = 'Une erreur est survenue lors de la connexion au serveur avec RCON.',
		add = connexionError + ' L\'ajout du joueur (\`${username}\`) √† la whitelist doit √™tre effectu√© manuellement.',
		edit = connexionError + ' La modification de la whitelist doit √™tre effectu√©e manuellement (retrait de \`${oldUsername}\` et ajout de \`${newUsername}\`).',
		remove = connexionError + ' Le retrait du joueur (\`${username}\`) dans la whitelist doit √™tre effectu√© manuellement.'
	}
}

export namespace Logs {
	export const commandMissingProperties = 'La commande ${filePath} n\'a pas les propri√©t√©s "data" ou "execute".';
	export const memberClickedRegisterButton = '${username} a cliqu√© sur le bouton d\'inscription.';
	export const memberLeft = '${username} a quitt√© le serveur Discord.';
	export const playerRoleWasRemoved = 'Le r√¥le ¬´ ' + playerRoleName + ' ¬ª de ${username} est retir√©.';
	export const ready = 'Pr√™t ! Connect√© en tant que ${username}.';
	export const refreshingCommands = 'D√©but du rafraichissement de ${numberOfCommands} commandes slash.';
	export const successfullyRefreshed = 'Rafraichissement r√©ussi de ${numberOfCommands} commandes slash.';
}

export namespace Services {
	export enum html {
		style = '<style>h1,h2,h3,h4,h5,h6,p,table{font-family:arial, sans-serif;color:#d4dfe4;}p{text-align:right;}html{background-color:#141414;padding:0 40px;}table{border-collapse:collapse; width:100%;border-spacing:0;}td,th{border:1px solid #4d4d4d;padding:8px;}tr:nth-child(even){background-color:#303030;}.user{display:flex;align-items:center;height:auto;}.center{text-align:center;}img{height:50px;border-radius:5px;margin-right:10px;}.date:first-letter{text-transform: capitalize;}</style>',
		script = '<script>async function fetchUsername (minecraftUuid) { const apiUrl = \''+ mojangApiUrl + '/user/profile/\' + minecraftUuid; const response = await fetch("https://corsproxy.io/?" + apiUrl, {}); const user = await response.json(); document.getElementById(minecraftUuid).innerText = user.name;}</script>',
		template = '<!DOCTYPE html><html lang="fr"><head><meta charset="utf-8"><title>Membres de ${minecraftServerName}</title>'+style+'</head><body><h1>Membres de ' + minecraftServerName + '</h1><table><tr><th>Membre</th><th>Nom d\'utilisateur Minecraft</th><th>Statut</th><th>Date d\'inscription</th><th>Derni√®re modification</th></tr>${table}</table><p>Joueurs inscrits : ${memberCount}</p></body>'+script+'</html>',
		templateWithStatus = `<!DOCTYPE html><html lang="fr"><head><meta charset="utf-8"><title>Membres de ${minecraftServerName}</title>`+style+'</head><body><h1>Membres de ' + minecraftServerName + 'avec le statut ¬´ ${status} ¬ª</h1><table><tr><th>Membre</th><th>Nom d\'utilisateur Minecraft</th><th>Date d\'inscription</th><th>Derni√®re modification</th></tr>${table}</table><p>Membres ayant le statut ¬´ ${status} ¬ª : ${memberCount}</p></body>'+script+'</html>',
		rowTemplate = '<tr><td><div class="user"><img src="${imgUrl}" alt="Photo de profil de ${username}">${username}</div></td><td id="${minecraftUuid}"><button onclick="fetchUsername(\'${minecraftUuid}\')">Afficher</button></td><td class="center">${status}</td><td class="date">${createdAt}</td><td class="date">${updatedAt}</td></tr>',
		rowTemplateWithStatus = '<tr><td><div class="user"><img src="${imgUrl}" alt="Photo de profil de ${username}">${username}</div></td><td id="${minecraftUuid}"><button onclick="fetchUsername(\'${minecraftUuid}\')">Afficher</button></td><td class="date">${createdAt}</td><td class="date">${updatedAt}</td></tr>'
	}

	export enum userStatus {
		cantSendDm = 'Attention : Impossible d\'envoyer un message √† cet utilisateur en raison de ses param√®tres de confidentialit√© !',
		dmAddedToWhitelist = `Tu a √©t√© ajout√© √† la whitelist de ${minecraftServerName}.`,
		dmRemovedFromWhitelist = `Tu a √©t√© retir√© de la whitelist de ${minecraftServerName}. Contacte les administrateurs pour plus de d√©tails.`,
		statusChanged = 'Le statut de <@${discordUuid}> √† √©t√© chang√© pour ¬´ ${status} ¬ª.'
	}
}

export namespace Utils {
	export const createdPlayerRole = 'Le r√¥le pour les joueurs n\'existait pas, il a √©t√© cr√©√©.';
}

export function getStatusName(status: number): string {
	switch (status) {
		case inscriptionStatus.awaitingApproval:
			return 'en attente';
		case inscriptionStatus.approved:
			return 'approuv√©';
		case inscriptionStatus.rejected:
			return 'rejet√©';
	}
}

export function statusToEmoji(status: number): string {
	switch (status) {
		case inscriptionStatus.awaitingApproval:
			return 'üïì';
		case inscriptionStatus.approved:
			return '‚úÖ';
		case inscriptionStatus.rejected:
			return '‚ùå';
	}
}