import * as Constants from './bot-constants';

export namespace services {
	enum htmlService {
		template = '<!DOCTYPE html><html lang="fr"><head><meta charset="utf-8"><title>Utilisateurs</title><style>h1, h2, h3, h4, h5, h6, p, table { font-family: arial, sans-serif;color: #d4dfe4;} html {background-color: #141414;padding: 0 40px;}table { border-collapse: collapse; width: 100%;border-spacing:0;}td,th{border:1px solid #4d4d4d;padding:8px;}tr:nth-child(even){background-color: #303030;}.user{display: flex; align-items: center; height:auto;}td:nth-child(3){text-align:center;}img{height: 50px;border-radius: 5px;margin-right: 10px;}.date:first-letter {text-transform: capitalize;}</style></head><body><h1>Utilisateurs de SpiceCraft</h1><table><tr><th>Utilisateur</th><th>Nom d\'utilisateur Minecraft</th><th>Statut</th><th>Date d\'inscription</th><th>Derni√®re modification</th></tr>$tableRows$</table></body><script>async function fetchUsername (minecraftUuid) { const apiUrl = `https://sessionserver.mojang.com/session/minecraft/profile/${minecraftUuid}`; const response = await fetch("https://corsproxy.io/?" + apiUrl, {}); const user = await response.json(); document.getElementById(minecraftUuid).innerHTML = user.name;}</script></html>',
		rowTemplate = '<tr><td><div class="user"><img src="$imgUrl$" alt="Photo de profil de $username$">$username$</div></td><td id="$minecraftUuid$"><button onclick="fetchUsername(\'$minecraftUuid$\')">Afficher</button></td><td>$status$</td><td class="date">$createdAt$</td><td class="date">$updatedAt$</td></tr>'
	}

	export enum userStatusService {
		dmAddedToWhitelist = 'Tu a √©t√© ajout√© √† la whitelist de SpiceCraft.',
		dmRemovedFromWhitelist = 'Tu a √©t√© retir√© de la whitelist de SpiceCraft. Contacte les administrateurs pour plus de d√©tails.',
		cantSendDm = 'Attention : Impossible d\'envoyer un message √† cet utilisateur en raison de ses param√®tres de confidentialit√© !',
		statusChanged = 'Le statut de <@$discordUuid$> √† √©t√© chang√© pour "$status$".'
	}

	export enum registeringService {
		timeoutAnswer = 'Temps de r√©ponse maximum d√©pass√©, r√©essaye en cliqant le bouton `S\'inscrire` √† nouveau.',
		messageSentInDms = 'Merci de r√©pondre au bot qui t\'a a envoy√© un message en priv√© !',
		messageSentInDmsNewUser = 'Bienvenue, nous sommes heureux de t\'accueillir ! Merci de r√©pondre au bot qui t\'a envoy√© un message en priv√© !',
		adminsAlreadyDeniedRequest = 'üö´ Les administrateurs ont d√©j√† refus√© ta demande ! üö´',
		askWhatIsMinecraftUsername = 'Quel est ton nom d\'utilisateur sur Minecraft ?',
		askWhoInvitedNewPlayer = 'Qui t\'a invit√© sur SpiceCraft ? Inscrit son nom d\'utilisateur Discord.',
		askWhatIsNewMinecraftUsername = 'Quel est le bon nom d\'utilisateur ?',
		reactToAcceptRules = 'R√©agit avec ‚úÖ pour indiquer que tu a lu et accept√© les r√®gles.',
		requestSucessfullyUpdated = 'Ta demande √† √©t√© mise √† jour avec succ√®s !',
		waitForAdminApprobation = 'Ton inscription est en attente d\'approbation par les administrateurs, je t\'enverrais un message quand elle sera accept√©e!',
		usernameUpdated = 'Ton nom d\'utilisateur a √©t√© chang√© avec succ√®s, je t\'envoie un message lorsque le nom d\'utilisateur sera mis √† jour dans la whitelist.',
		embedDescription = 'Compte Discord : <@$discordUuid$>.\nUsername Minecraft : $minecraftUsername$.',
		awaitingApprovalUserChangedMinecraftUsername = '<@$discordUuid$> a chang√© son username Minecraft pour \`$minecraftUsername$\` dans sa demande d\'ajout √† la whitelist.',
		minecraftAccountDoesNotExist = '‚ùå Le compte Minecraft ¬´ $minecraftUsername$ ¬ª n\'existe pas! Tu peux cliquer √† nouveau le bouton \`S\'inscrire\` pour r√©essayer. ‚ùå',
		dmsAreClosed = 'Tes param√®tres de confidentialit√© m\'emp√™chent de t\'envoyer des messages. Change ces param√®tres pour continuer.',
		sameMinecraftAccountAsBefore = 'Pas besoin de mettre √† jour ton nom d\'utilisateur, car il est identique √† celui associ√© au compte Minecraft dans la whitelist.'
	}

	export import html = htmlService;
	export import userStatus = userStatusService;
	export import registering = registeringService;
}

export namespace events {
	export const clickToConfirmChangesToWhitelist = 'Clique sur le bouton lorsque c\'est fait, afin que <@$discordUuid$> soit inform√© du changement li√© √† sa demande.';

	enum approbationButton {
		messageSentToPlayerToConfirmInscription = 'Tu a √©t√© ajout√© √† la whitelist. Si tu n\'arrive pas √† te connecter, ton username Minecraft est peut-√™tre incorrect. Si c\'est le cas, clique √† nouveau sur le bouton d\'inscription.',
		requestGranted = '‚úÖ La demande a √©t√© approuv√©e par <@$discordUuid$>.',
		success = 'Un message a √©t√© envoy√© √† <@$discordUuid$> pour l\'informer de son ajout √† la whitelist.',
		successNoDm = '<@$discordUuid$> a √©t√© ajout√© √† la whitelist. Cependant, ses param√®tres de confidentialit√© m\'emp√™chent de lui envoyer un message afin de lui en informer.',
		changeWhitelistBeforeCliking = 'N\'oublies pas d\'ajouter manuellement le joueur √† la whitelist AVANT de cliquer sur le bouton !'
	}

	enum rejectionButton {
		messageSentToUserToInformRejection = 'D√©sol√©, mais les administrateurs ont choisi de ne pas t\'ajouter √† la whitelist. Contacte-les pour plus de d√©tails.',
		requestDenied = '‚ùå La demande a √©t√© rejet√©e par <@$discordUuid$>.',
		askConfirmation = 'Es-tu certain de vouloir rejeter <@$discordUuid$> ?',
		success = 'Un message a √©t√© envoy√© √† <@$discordUuid$> pour l\'informer du rejet.',
		successNoDm = '<@$discordUuid$> a √©t√© rejet√©. Cependant, ses param√®tres de confidentialit√© m\'emp√™chent de lui envoyer un message afin de lui en informer.',
		userStillInBdExplanation = 'Cet utilisateur est encore dans la base de donn√©es, avec le statut "rejet√©", donc s\'il rejoint √† nouveau le serveur, le bot se souvient que <@$discordUuid$> est rejet√©. Si tu souhaite le supprimer, tu peux utiliser la commande /supprimer-entree'
	}

	enum usernameChangeConfirmationButton {
		messageUpdate = '‚úÖ La mise √† jour de username a √©t√© compl√©t√©e (avec l\'autorisation de <@$discordUuid$>).',
		messageSentToConfirmUsernameChange = 'Ton username Minecraft a √©t√© mis √† jour dans la whitelist.',
		success = 'Un message a √©t√© envoy√© √† <@$discordUuid$> pour l\'informer de la mise √† jour du username.',
		successNoDm = 'Mise a jour du compte Minecraft de <@$discordUuid$> effectu√©e avec succ√®s, dans la whitelist et la base de donn√©es. Cependant, ses param√®tres de confidentialit√© m\'emp√™chent de lui envoyer un message afin de lui en informer.',
		changeWhitelistBeforeCliking = 'N\'oublies pas de modifier manuellement la whitelist AVANT de cliquer sur le bouton !'
	}

	enum banButton {
		messageUpdate = 'üî® Le joueur a √©t√© retir√© de la whitelist du serveur Minecraft par <@$discordUuid$>.',
		reply = '<@$discordUuid$> a √©t√© retir√© du serveur Minecraft avec succ√®s.'
	}

	enum registerButton {
		askIfFirstTimePlaying = 'As-tu d√©j√† jou√© sur SpiceCraft ?'
	}

	export import approbation = approbationButton;
	export import rejection = rejectionButton;
	export import usernameChangeConfirmation = usernameChangeConfirmationButton;
	export import register = registerButton;
	export import ban = banButton;
}

export namespace commands {
	enum showInscriptionButtonCommand {
		description = 'Envoie un message avec un bouton permettant de s\'inscrire.',
		instructions = 'Pour t\'inscrire, clique sur le bouton. Le bot va t\'envoyer un message priv√© pour compl√©ter l\'inscription.\n**Si tu as entr√© un nom d\'utilisateur erron√© lors de la configuration initiale, clique sur le bouton √† nouveau.**',
		done = 'Fait !'
	}

	enum resetStatusCommand {
		description = 'Remettre le statut d\'un membre √† "en attente".',
		userOptionDescription = 'Membre dont il faut r√©initialiser le statut'
	}

	enum deleteEntryCommand {
		messageUpdate = 'üóëÔ∏è L\'utilisateur a √©t√© supprim√© de la whitelist et de la base de donn√©es.',
		reply = '<@$discordUuid$> √† √©t√© supprim√© de la whitelist et de la base de donn√©es avec succ√®s.',
		description = 'Supprime une rang√©e dans la base de donn√©es.',
		userIdOption = 'Retirer l\'entr√©e pour quel UUID Discord ?'
	}

	enum displayUsersCommand {
		noUserFound = 'Aucun utilisateur √† afficher.',
		displayingUsersWithStatus = 'Affichage des utilisateurs avec le statut "$status$"',
		displayingAllUsers = 'Affichage de tous les utilisateurs',
		databaseEntryLine = '<@$discordUuid$> | [Afficher](<https://api.mojang.com/user/profile/$minecraftUuid$>) | $statusEmoji$\n',
		filenameJson = 'utilisateurs.json',
		filenameJsonWithStatus = 'utilisateurs_$status$.json',
		filenameHtml = 'utilisateurs.html',
		description = 'Affiche les utilisateurs inscrit selon leur statut (optionnel).',
		statusOptionDescription = 'Rechercher les utilisateur avec un statut particulier.',
		formatOptionDescription = 'Afficher les donn√©es avec quel format?'
	}

	enum approveCommand {
		description = 'Approuver le membre du serveur Minecraft et lui ajouter le r√¥le joueur sur le Discord.',
		memberOptionDescription = 'Membre √† approuver',
		silentOptionDescription = 'Envoyer un message √† l\'utilisateur approuv√© ?'
	}

	enum rejectCommand {
		description = 'Rejeter le membre du serveur Minecraft et lui retirer le r√¥le joueur sur le Discord.',
		userOptionDescription = 'Membre √† rejeter',
		silentOptionDescription = 'Envoyer un message √† l\'utilisateur rejet√© ?'
	}

	enum editUsernameCommand {
		usernameIdenticalToPreviousOne = 'Pas besoin de changer le nom d\'utilisateur, le nouveau est identique √† celui d√©j√† dans la base de donn√©es.',
		confirmationMessage = 'Nom d\'utilisateur chang√©.',
		description = 'Manuellement modifier le nom d\'utilisateur Minecraft d\'un joueur.',
		userOptionDescription = 'Modifier l\'entr√©e pour quel UUID Discord ?',
		newUsernameOptionDescription = 'Quel est le nouveau nom d\'utilisateur ?'
	}

	enum endSeasonCommand {
		warning = `Attention ! Es-tu certain de vouloir terminer la saison en cours? La base de donn√©e sera effac√©e, les r√¥les seront remis √† z√©ro et tous les messages sur le channel #${Constants.whitelistChannelName} seront effac√©s.`,
		description = `Efface la base de donn√©es, efface les messages de #${Constants.whitelistChannelName} et supprime le r√¥le ${Constants.playerRoleName}.`,
		seasonEnded = 'La saison a pris fin !',
		newSeasonBegins = 'Nouvelle saison !'
	}

	enum displayUsernameCommand {
		description = 'Affiche le nom d\'utilisateur Minecraft d\'un membre.',
		userOptionDescription = 'Membre dont il faut afficher le nom d\'utilisateur Minecraft.'
	}

	export import showInscriptionButton = showInscriptionButtonCommand;
	export import resetStatus = resetStatusCommand;
	export import deleteEntry = deleteEntryCommand;
	export import displayUsers = displayUsersCommand;
	export import approve = approveCommand;
	export import reject = rejectCommand;
	export import editUsername = editUsernameCommand;
	export import endSeason = endSeasonCommand;
	export import displayUsername = displayUsernameCommand;
}

export namespace errors {
	export const usernameUsedWithAnotherAccount = '‚ö†Ô∏è Un autre joueur est d√©j√† inscrit avec ce nom d\'utilisateur Minecraft. S\'il s\'agit bien de ton nom d\'utilisateur, contacte un administrateur. ‚ö†Ô∏è';
	export const noDiscordUserWithThisUuid = 'Cet utilisateur Discord n\'est pas membre du serveur.';
	export const generic = 'Une erreur inconnue est survenue !';
	export const commandExecution = 'Une erreur s\'est produite lors de l\'ex√©cution de cette commande!';
	export const commandNotFound = `Aucune commande ne corresponsant √† $command$ n'a √©t√© trouv√©e.`;
	export const unauthorized = 'Tu n\'as pas les permissions requises pour effectuer ceci.';

	enum apiErrors {
		couldNotConnectToApi = 'Erreur lors de la connexion √† l\'API de Mojang.',
		noMojangAccountWithThatUsername = 'Aucun compte Mojang n\'a ce nom d\'utilisateur !',
		noMojangAccountWithThatUuid = 'Aucun compte Mojang n\'a ce UUID !'
	}

	enum databaseErrors {
		userDoesNotExist = 'Cet utilisateur n\'est pas inscrit.',
		notUnique = 'Ce UUID Minecraft ou Discord existe d√©j√† dans la base de donn√©es.',
		notUniqueMinecraft = 'Un autre joueur s\'est inscrit avec ce compte Minecraft.',
		unknownError = 'Une erreur inconnue est survenue lors de l\'√©criture dans la base de donn√©es.',
		invalidStatus = 'Statut invalide'
	}

	enum rconErrors {
		connexionError = 'Une erreur est survenue lors de la connexion au serveur avec RCON.',
		add = `${connexionError} L'ajout du joueur ($username$) √† la whitelist doit √™tre effectu√© manuellement.`,
		edit = `${connexionError} La modification de la whitelist doit √™tre effectu√©e manuellement (retrait de $oldUsername$ et ajout de $newUsername$).`,
		remove = `${connexionError} Le retrait du joueur ($username$) dans la whitelist doit √™tre effectu√© manuellement.`
	}

	export import database = databaseErrors;
	export import api = apiErrors;
	export import rcon = rconErrors;
}

export namespace components {
	enum buttonComponents {
		cancel = 'Annuler',
		approve = 'Approuver',
		reject = 'Rejeter',
		yes = 'Oui',
		no = 'Non',
		ignore = 'Ignorer',
		endSeason = 'Oui, terminer la saison',
		register = 'S\'inscrire',
		doNotUpdate = 'Ne pas mettre √† jour',
		manuallyAddedToWhitelist = 'Ajout manuel effectu√©',
		manuallyEditedWhitelist = 'Modifications manuelles effectu√©es'
	}

	enum embedTitles {
		approvalRequest = '$discordUsername$ veut √™tre ajout√© √† la whitelist.',
		usernameChangeRequest = '$discordUsername$ demande un changement de nom d\'utilisateur.',
		userLeft = 'Un utilisateur a quitt√©. Faut-il le retirer de la whitelist du serveur et de la base de donn√©es ?',
		userBanned = 'Un utilisateur a √©t√© banni. Faut-il le bannir du serveur Minecraft en plus du sereur Discord ?',
		rules = 'Les r√®gles',
	}

	enum embedDescription {
		approvalRequest = 'Compte Discord : <@$discordUuid$>.\nUsername Minecraft : $username$.',
		approvalRequestNewUser = 'Compte Discord : <@$discordUuid$>.\nUsername Minecraft : $username$.\nPersonne qui a invit√© : $inviter$.',
		usernameChangeRequest = 'Compte Discord : <@$discordUuid$>.\nNouveau username Minecraft : $username$.',
		userLeft = 'Compte Discord : <@$discordUuid$>.',
		userBanned = 'Compte Discord : <@$discordUuid$>.',
		rules = '1. Jouer sur le serveur signifie que vous avez pris connaissance des r√®gles.\n2. Il est possible de construire une base dans l\'overworld √† l\'ext√©rieur d\'un carr√© de 600 blocs de largeur autour de 0,0 (donc, si une des coordonn√©es exc√®de +300 ou -300, vous pouvez construire votre base). Ce carr√© est donc r√©serv√© pour les boutiques!\n3. Assurez vous que vos constructions sur le toit du nether soient spawn-proof.\n4. Aucun grief ou vol n\'est tol√©r√©. Cela inclut boutiques, maisons et farms.\n5. Aucun hack, cheat, xray, minimap ou tout autre avantage injuste n\'est tol√©r√©, ceci inclut les ressource packs, clients, mods et autres. Les seules modifications du client autoris√©es sont Optifine, Iris, Sodium, Phosphore et Litematica.\n6. Le PVP est tol√©r√© uniquement si tous les participants y consentent.\n7. Les pranks sont accept√©s, √† condition d\'√™tre inoffensifs et de bon go√ªt.\n8. Respectez le territoire des autres joueurs. Ne construisez pas proche du territoire d\'un autre sans son accord.\n9. Il est interdit d\'√™tre toxique, m√©chant ou rude avec un autre joueur, sur Discord ou dans le serveur Minecraft directement.\n10. La seed est priv√©e, par cons√©quent il est interdit d\'essayer de la d√©couvrir. Si un joueur est en possession de la seed du serveur, il lui est interdit de l\'utiliser pour obtenir un avantage, cela inclut trouver les slime chunks, certains biomes, des portails de l\'end, etc...\n11. Si vous voyez un ou des joueurs enfreindre ces r√®glements, veuillez aviser un admin le plus rapiement possible sur Discord.\n12. Si un joueur enfreint un de ces r√®glements, les cons√©quences sont √† la discr√©tion des administrateurs.\n13. Les cons√©quences peuvent aller jusqu\'√† un bannissement permanent, tout comme elles peuvent √™tre plus l√©g√®res.'
	}

	export import buttons = buttonComponents;
	export import titles = embedTitles;
	export import descriptions = embedDescription;
}

export function getStatusName(status: number): string {
	switch (status) {
		case Constants.inscriptionStatus.awaitingApproval: return 'en attente';
		case Constants.inscriptionStatus.approved: return 'approuv√©';
		case Constants.inscriptionStatus.rejected: return 'rejet√©';
	}
}

export function statusToEmoji(status: number): string {
	switch (status) {
		case Constants.inscriptionStatus.awaitingApproval: return 'üïì';
		case Constants.inscriptionStatus.approved: return '‚úÖ';
		case Constants.inscriptionStatus.rejected: return '‚ùå';
	}
}